import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useState } from "react";
import Task from "../components/Task";

export default function Home() {
  const [userInput, setUserInput] = useState("");
  const [taskStatus, setTaskStatus] = useState([]);
  const [displayTask, setDisplayTask] = useState(false);
  const [itemID, setItemID] = useState(0);

  const handleUserInput = e => {
    e.preventDefault();
    setUserInput(e.target.value);
  };

  const addNewTask = e => {
    e.preventDefault();
    userInput !== "" &&
      setTaskStatus([
        ...taskStatus,
        {
          uid: itemID,
          title: userInput,
          status: "backlog"
        }
      ]);
    setUserInput("");
    setDisplayTask(false);
    setItemID(itemID + 1);
  };


  const backlogHandler = index => {
    const newStatus = [...taskStatus];
    newStatus[index].status = "backlog";
    console.log(newStatus[index])
    setTaskStatus(newStatus);
  };

  const activeHandler = index => {
    const newStatus = [...taskStatus];
    newStatus[index].status = "active";
    console.log(newStatus[index])
    setTaskStatus(newStatus);
  };

  const reviewHandler = index => {
    const newStatus = [...taskStatus];
    newStatus[index].status = "review";
    console.log(newStatus[index])
    setTaskStatus(newStatus);
  };

  const resolvedHandler = index => {
    const newStatus = [...taskStatus];
    newStatus[index].status = "resolved";
    console.log(newStatus[index])
    setTaskStatus(newStatus);
  };

  const backlogArray = taskStatus.filter(item => item.status === "backlog");
  const activeArray = taskStatus.filter(item => item.status === "active");
  const reviewArray = taskStatus.filter(item => item.status === "review");
  const resolvedArray = taskStatus.filter(item => item.status === "resolved");

  const logger = () => {
    console.log(taskStatus);
  };

  const updateDisplay = () => {
    setDisplayTask(!displayTask);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Kanban Bro-ard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.title}>
        <h1>Kanban Bro-ard</h1>
      </div>

      <button onClick={logger}>Logger</button>
      
      <div className={styles.boardList}>
        <div className={styles.boardSection}>
          <h4>Backlog</h4>
          <div>
            {backlogArray.length >= 1
              ? backlogArray.map((backlog, index) => {
                  return (
                    <Task
                      key={index}
                      index={index}
                      item={backlog}
                      handleBacklog={backlogHandler}
                      handleActive={activeHandler}
                      handleReview={reviewHandler}
                      handleResolved={resolvedHandler}
                    />
                  );
                })
              : ""}
          </div>
          <form>
            {displayTask ? (
              <div className={styles.formInput}>
                <input
                  type="text"
                  value={userInput}
                  placeholder="Enter task"
                  onChange={handleUserInput}
                  required
                />
                <button onClick={addNewTask}>Submit</button>
              </div>
            ) : (
              <button onClick={updateDisplay}>Add task</button>
            )}
          </form>
        </div>
        <div className={styles.boardSection}>
          <h4>Active</h4>
          <div>
            {activeArray.length >= 1
              ? activeArray.map((active, index) => {
                  return (
                    <Task
                      key={index}
                      index={index}
                      item={active}
                      handleBacklog={backlogHandler}
                      handleActive={activeHandler}
                      handleReview={reviewHandler}
                      handleResolved={resolvedHandler}
                    />
                  );
                })
              : ""}
          </div>
        </div>
        <div className={styles.boardSection}>
          <h4>In Review</h4>
          <div>
            {reviewArray.length >= 1
              ? reviewArray.map((review, index) => {
                  return (
                    <Task
                      key={index}
                      index={index}
                      item={review}
                      handleBacklog={backlogHandler}
                      handleActive={activeHandler}
                      handleReview={reviewHandler}
                      handleResolved={resolvedHandler}
                    />
                  );
                })
              : ""}
          </div>
        </div>
        <div className={styles.boardSection}>
          <h4>Resolved</h4>
          <div>
            {resolvedArray.length >= 1
              ? resolvedArray.map((resolved, index) => {
                  return (
                    <Task
                      key={index}
                      index={index}
                      item={resolved}
                      handleBacklog={backlogHandler}
                      handleActive={activeHandler}
                      handleReview={reviewHandler}
                      handleResolved={resolvedHandler}
                    />
                  );
                })
              : ""}
          </div>
        </div>
      </div>
    </div>
  );
}
