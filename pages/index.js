import Head from "next/head";
import styles from "../styles/Home.module.css";
import React, { useState } from "react";
import Task from "../components/Task";

export default function Home() {
  const [userInput, setUserInput] = useState({ title: "", description: "" });
  const [taskStatus, setTaskStatus] = useState([]);
  const [displayTask, setDisplayTask] = useState(false);
  const [itemID, setItemID] = useState(0);

  const handleUserInput = e => {
    e.preventDefault();
    const { name, value } = e.target;
    setUserInput({
      ...userInput,
      [name]: value
    });
  };

  const addNewTask = e => {
    e.preventDefault();
    userInput !== "" &&
      setTaskStatus([
        ...taskStatus,
        {
          uid: itemID,
          title: userInput.title,
          description: userInput.description,
          status: "backlog"
        }
      ]);
    setUserInput({ title: "", description: "" });
    setDisplayTask(false);
    setItemID(itemID + 1);
  };

  const handleFunction = (e, index) => {
    const newStatus = [...taskStatus];
    newStatus[index].status = e.target.value;
    setTaskStatus(newStatus);
  };

  const handleRemove = index => {
    const newStatus = [...taskStatus];
    newStatus[index] = !newStatus[index];
    setTaskStatus(newStatus);
  };

  const cancelTask = e => {
    e.preventDefault();
    setDisplayTask(false);
  };

  const updateDisplay = () => {
    setDisplayTask(!displayTask);
  };

  const backlogArray = taskStatus.filter(item => item.status === "backlog");
  const activeArray = taskStatus.filter(item => item.status === "active");
  const reviewArray = taskStatus.filter(item => item.status === "review");
  const resolvedArray = taskStatus.filter(item => item.status === "resolved");

  return (
    <div className={styles.container}>
      <Head>
        <title>Kanban Brother</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.title}>
        <h1>Kanban Brother</h1>
      </div>

      <div className={styles.boardList}>
        <div className={styles.boardSection}>
            <h4>BACKLOG</h4>
          <div className={styles.taskSection}>
            {backlogArray.length >= 1
              ? backlogArray.map((backlog, index) => {
                  return (
                    <Task
                      key={index}
                      item={backlog}
                      handleFunction={handleFunction}
                      handleRemove={handleRemove}
                    />
                  );
                })
              : ""}
            <form>
              {displayTask ? (
                <div className={styles.formInput}>
                  <input
                    type="text"
                    value={userInput.title}
                    name="title"
                    placeholder="Enter task title"
                    onChange={handleUserInput}
                    required
                  />
                  <textarea
                    type="text"
                    value={userInput.description}
                    name="description"
                    placeholder="Enter a description"
                    onChange={handleUserInput}
                    required
                  />
                  <div className={styles.buttonSelect}>
                    <button onClick={addNewTask}>Submit</button>
                    <button onClick={cancelTask}>Cancel</button>
                  </div>
                </div>
              ) : (
                <input
                  className={styles.formAddTask}
                  name="addTask"
                  onClick={updateDisplay}
                  placeholder="+ Add a task"
                />
              )}
            </form>
          </div>
        </div>
        <div className={styles.boardSection}>
            <h4>ACTIVE</h4>
          <div className={styles.taskSection}>
            {activeArray.length >= 1
              ? activeArray.map((active, index) => {
                  return (
                    <Task
                      key={index}
                      item={active}
                      handleFunction={handleFunction}
                      handleRemove={handleRemove}
                    />
                  );
                })
              : ""}
          </div>
        </div>
        <div className={styles.boardSection}>
            <h4>IN REVIEW</h4>
          <div className={styles.taskSection}>
            {reviewArray.length >= 1
              ? reviewArray.map((review, index) => {
                  return (
                    <Task
                      key={index}
                      item={review}
                      handleFunction={handleFunction}
                      handleRemove={handleRemove}
                    />
                  );
                })
              : ""}
          </div>
        </div>
        <div className={styles.boardSection}>
            <h4>RESOLVED</h4>
          <div className={styles.taskSection}>
            {resolvedArray.length >= 1
              ? resolvedArray.map((resolved, index) => {
                  return (
                    <Task
                      key={index}
                      item={resolved}
                      handleFunction={handleFunction}
                      handleRemove={handleRemove}
                    />
                  );
                })
              : ""}
          </div>
        </div>
      </div>
    </div>
  );
}
